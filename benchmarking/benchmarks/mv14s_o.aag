aag 147 26 15 1 106
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54 1
56 218
58 224
60 230
62 236
64 242
66 248
68 254
70 260
72 266
74 272
76 278
78 285
80 291
82 294
136
84 82 54
86 78 54
88 80 54
90 88 86
92 76 54
94 72 54
96 74 54
98 96 94
100 98 92
102 100 90
104 56 54
106 58 54
108 106 104
110 60 54
112 110 108
114 62 54
116 114 112
118 64 54
120 118 116
122 66 54
124 122 120
126 68 54
128 70 54
130 128 126
132 130 124
134 132 102
136 134 84
138 4 3
140 5 2
142 141 139
144 142 6
146 143 7
148 147 145
150 148 8
152 149 9
154 153 151
156 154 10
158 155 11
160 159 157
162 160 12
164 161 13
166 165 163
168 166 14
170 167 15
172 171 169
174 172 16
176 173 17
178 177 175
180 178 18
182 179 19
184 183 181
186 184 20
188 185 21
190 189 187
192 190 22
194 191 23
196 195 193
198 196 24
200 197 25
202 201 199
204 202 26
206 203 27
208 207 205
210 209 84
212 211 89
214 213 105
216 212 29
218 217 215
220 213 107
222 212 31
224 223 221
226 213 111
228 212 33
230 229 227
232 213 115
234 212 35
236 235 233
238 213 119
240 212 37
242 241 239
244 213 123
246 212 39
248 247 245
250 213 127
252 212 41
254 253 251
256 213 129
258 212 43
260 259 257
262 213 95
264 212 45
266 265 263
268 213 97
270 212 47
272 271 269
274 213 93
276 212 49
278 277 275
280 213 86
282 212 50
284 283 281
286 210 88
288 212 52
290 289 287
292 89 85
294 293 211
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 controllable_c<9>
i10 controllable_c<10>
i11 controllable_c<11>
i12 controllable_c<12>
i13 a<0>
i14 a<1>
i15 a<2>
i16 a<3>
i17 a<4>
i18 a<5>
i19 a<6>
i20 a<7>
i21 a<8>
i22 a<9>
i23 a<10>
i24 a<11>
i25 a<12>
l0 n55
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
l11 counter<10>_out
l12 counter<11>_out
l13 counter<12>_out
l14 counter<13>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:38 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv14s.v   ---gives--> mv14s.mv
> abc -c "read_blif_mv mv14s.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s mv14s_o.aig"   ---gives--> mv14s_o.aig
> aigtoaig mv14s_o.aig mv14s_o.aag   ---gives--> mv14s_o.aag (this file)
Content of mv14s.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [12:0] a;
  input [12:0] controllable_c;
  reg [13:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 14'b11111111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8] ^
                    controllable_c[9] ^
                    controllable_c[10] ^
                    controllable_c[11] ^
                    controllable_c[12];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[13] & ctrl_xor)
       counter[13] = 0;
    else if(counter[12])
      begin
       counter[13] = 1;
       counter[12] = 0;
      end
    else
       counter[12:0] = a;
   end
endmodule
-------------------------------
