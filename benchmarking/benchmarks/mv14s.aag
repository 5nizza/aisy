aag 259 26 15 1 218
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54 1
56 441
58 447
60 453
62 459
64 465
66 471
68 477
70 483
72 489
74 495
76 501
78 507
80 513
82 519
192
84 57 54
86 56 54
88 85 54
90 59 54
92 58 54
94 91 54
96 61 54
98 60 54
100 97 54
102 63 54
104 62 54
106 103 54
108 65 54
110 64 54
112 109 54
114 67 54
116 66 54
118 115 54
120 69 54
122 68 54
124 121 54
126 71 54
128 70 54
130 127 54
132 73 54
134 72 54
136 133 54
138 75 54
140 74 54
142 139 54
144 77 54
146 76 54
148 145 54
150 79 54
152 78 54
154 151 54
156 81 54
158 80 54
160 157 54
162 83 54
164 82 54
166 163 54
168 94 88
170 168 100
172 170 106
174 172 112
176 174 118
178 176 124
180 178 130
182 180 136
184 182 142
186 184 148
188 186 154
190 188 160
192 190 166
194 4 3
196 5 2
198 197 195
200 198 6
202 199 7
204 203 201
206 204 8
208 205 9
210 209 207
212 210 10
214 211 11
216 215 213
218 216 12
220 217 13
222 221 219
224 222 14
226 223 15
228 227 225
230 228 16
232 229 17
234 233 231
236 234 18
238 235 19
240 239 237
242 240 20
244 241 21
246 245 243
248 246 22
250 247 23
252 251 249
254 252 24
256 253 25
258 257 255
260 258 26
262 259 27
264 263 261
266 265 164
268 267 160
270 269 267
272 270 269
274 267 161
276 275 272
278 160 86
280 161 28
282 281 279
284 266 86
286 283 267
288 287 285
290 160 92
292 161 30
294 293 291
296 266 92
298 295 267
300 299 297
302 160 98
304 161 32
306 305 303
308 266 98
310 307 267
312 311 309
314 160 104
316 161 34
318 317 315
320 266 104
322 319 267
324 323 321
326 160 110
328 161 36
330 329 327
332 266 110
334 331 267
336 335 333
338 160 116
340 161 38
342 341 339
344 266 116
346 343 267
348 347 345
350 160 122
352 161 40
354 353 351
356 266 122
358 355 267
360 359 357
362 160 128
364 161 42
366 365 363
368 266 128
370 367 267
372 371 369
374 160 134
376 161 44
378 377 375
380 266 134
382 379 267
384 383 381
386 160 140
388 161 46
390 389 387
392 266 140
394 391 267
396 395 393
398 160 146
400 161 48
402 401 399
404 266 146
406 403 267
408 407 405
410 160 152
412 161 50
414 413 411
416 266 152
418 415 267
420 419 417
422 161 52
424 266 158
426 422 267
428 427 425
430 164 161
432 431 161
434 433 267
436 289 277
438 276 86
440 439 437
442 301 277
444 276 92
446 445 443
448 313 277
450 276 98
452 451 449
454 325 277
456 276 104
458 457 455
460 337 277
462 276 110
464 463 461
466 349 277
468 276 116
470 469 467
472 361 277
474 276 122
476 475 473
478 373 277
480 276 128
482 481 479
484 385 277
486 276 134
488 487 485
490 397 277
492 276 140
494 493 491
496 409 277
498 276 146
500 499 497
502 421 277
504 276 152
506 505 503
508 429 277
510 276 158
512 511 509
514 434 277
516 276 164
518 517 515
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 controllable_c<9>
i10 controllable_c<10>
i11 controllable_c<11>
i12 controllable_c<12>
i13 a<0>
i14 a<1>
i15 a<2>
i16 a<3>
i17 a<4>
i18 a<5>
i19 a<6>
i20 a<7>
i21 a<8>
i22 a<9>
i23 a<10>
i24 a<11>
i25 a<12>
l0 n55
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
l11 counter<10>_out
l12 counter<11>_out
l13 counter<12>_out
l14 counter<13>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:37 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv14s.v   ---gives--> mv14s.mv
> abc -c "read_blif_mv mv14s.mv; write_aiger -s mv14s.aig"   ---gives--> mv14s.aig
> aigtoaig mv14s.aig mv14s.aag   ---gives--> mv14s.aag (this file)
Content of mv14s.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [12:0] a;
  input [12:0] controllable_c;
  reg [13:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 14'b11111111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8] ^
                    controllable_c[9] ^
                    controllable_c[10] ^
                    controllable_c[11] ^
                    controllable_c[12];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[13] & ctrl_xor)
       counter[13] = 0;
    else if(counter[12])
      begin
       counter[13] = 1;
       counter[12] = 0;
      end
    else
       counter[12:0] = a;
   end
endmodule
-------------------------------
