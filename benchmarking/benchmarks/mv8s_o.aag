aag 81 14 9 1 58
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30 1
32 122
34 128
36 134
38 140
40 146
42 152
44 159
46 162
76
48 32 30
50 34 30
52 50 48
54 36 30
56 54 52
58 38 30
60 58 56
62 40 30
64 62 60
66 42 30
68 66 64
70 44 30
72 70 68
74 46 30
76 74 72
78 4 3
80 5 2
82 81 79
84 82 6
86 83 7
88 87 85
90 88 8
92 89 9
94 93 91
96 94 10
98 95 11
100 99 97
102 100 12
104 101 13
106 105 103
108 106 14
110 107 15
112 111 109
114 113 74
116 115 71
118 117 49
120 116 17
122 121 119
124 117 51
126 116 19
128 127 125
130 117 55
132 116 21
134 133 131
136 117 59
138 116 23
140 139 137
142 117 63
144 116 25
146 145 143
148 117 67
150 116 27
152 151 149
154 114 70
156 116 28
158 157 155
160 75 71
162 161 115
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 a<0>
i8 a<1>
i9 a<2>
i10 a<3>
i11 a<4>
i12 a<5>
i13 a<6>
l0 n31
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:32 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv8s.v   ---gives--> mv8s.mv
> abc -c "read_blif_mv mv8s.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s mv8s_o.aig"   ---gives--> mv8s_o.aig
> aigtoaig mv8s_o.aig mv8s_o.aag   ---gives--> mv8s_o.aag (this file)
Content of mv8s.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [6:0] a;
  input [6:0] controllable_c;
  reg [7:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 8'b11111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[7] & ctrl_xor)
       counter[7] = 0;
    else if(counter[6])
      begin
       counter[7] = 1;
       counter[6] = 0;
      end
    else
       counter[6:0] = a;
   end
endmodule
-------------------------------
