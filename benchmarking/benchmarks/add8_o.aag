aag 127 24 2 1 101
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50 1
52 255
54
54 52 50
56 46 30
58 44 28
60 42 26
62 40 24
64 38 22
66 36 20
68 34 18
70 37 21
72 71 68
74 73 67
76 39 23
78 77 75
80 79 65
82 41 25
84 83 81
86 85 63
88 43 27
90 89 87
92 91 61
94 45 29
96 95 93
98 97 59
100 47 31
102 101 99
104 103 57
106 105 48
108 104 49
110 109 107
112 111 33
114 110 32
116 115 113
118 116 17
120 117 16
122 121 119
124 46 31
126 47 30
128 127 125
130 129 99
132 128 98
134 133 131
136 134 15
138 135 14
140 139 137
142 44 29
144 45 28
146 145 143
148 147 93
150 146 92
152 151 149
154 152 13
156 153 12
158 157 155
160 42 27
162 43 26
164 163 161
166 165 87
168 164 86
170 169 167
172 170 11
174 171 10
176 175 173
178 40 25
180 41 24
182 181 179
184 183 81
186 182 80
188 187 185
190 188 9
192 189 8
194 193 191
196 38 23
198 39 22
200 199 197
202 201 75
204 200 74
206 205 203
208 206 7
210 207 6
212 211 209
214 35 19
216 215 69
218 216 3
220 217 2
222 221 219
224 36 21
226 37 20
228 227 225
230 228 68
232 229 69
234 233 231
236 235 5
238 234 4
240 239 237
242 240 222
244 242 212
246 244 194
248 246 176
250 248 158
252 250 140
254 252 122
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 a<0>
i9 a<1>
i10 a<2>
i11 a<3>
i12 a<4>
i13 a<5>
i14 a<6>
i15 a<7>
i16 b<0>
i17 b<1>
i18 b<2>
i19 b<3>
i20 b<4>
i21 b<5>
i22 b<6>
i23 b<7>
l0 n51
l1 err_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:40 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv add8.v   ---gives--> add8.mv
> abc -c "read_blif_mv add8.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s add8_o.aig"   ---gives--> add8_o.aig
> aigtoaig add8_o.aig add8_o.aag   ---gives--> add8_o.aag (this file)
Content of add8.v:
// realizable
module bench(clk, a, b, controllable_c, err);
  input clk;
  input [7:0] a;
  input [7:0] b;
  input [7:0] controllable_c;
  output err;
  reg err;

  initial
  begin
    err = 1'b0;
  end

  always @ (posedge clk)
  begin
    if(controllable_c == a + b)
         err = 1'b0;
      else
         err = 1'b1;
   end
endmodule
-------------------------------
