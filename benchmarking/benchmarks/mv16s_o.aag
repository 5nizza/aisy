aag 169 30 17 1 122
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62 1
64 250
66 256
68 262
70 268
72 274
74 280
76 286
78 292
80 298
82 304
84 310
86 316
88 322
90 329
92 335
94 338
156
96 94 62
98 90 62
100 92 62
102 100 98
104 88 62
106 84 62
108 86 62
110 108 106
112 110 104
114 112 102
116 64 62
118 66 62
120 118 116
122 68 62
124 122 120
126 70 62
128 126 124
130 72 62
132 130 128
134 74 62
136 134 132
138 76 62
140 138 136
142 78 62
144 142 140
146 80 62
148 82 62
150 148 146
152 150 144
154 152 114
156 154 96
158 4 3
160 5 2
162 161 159
164 162 6
166 163 7
168 167 165
170 168 8
172 169 9
174 173 171
176 174 10
178 175 11
180 179 177
182 180 12
184 181 13
186 185 183
188 186 14
190 187 15
192 191 189
194 192 16
196 193 17
198 197 195
200 198 18
202 199 19
204 203 201
206 204 20
208 205 21
210 209 207
212 210 22
214 211 23
216 215 213
218 216 24
220 217 25
222 221 219
224 222 26
226 223 27
228 227 225
230 228 28
232 229 29
234 233 231
236 234 30
238 235 31
240 239 237
242 241 96
244 243 101
246 245 117
248 244 33
250 249 247
252 245 119
254 244 35
256 255 253
258 245 123
260 244 37
262 261 259
264 245 127
266 244 39
268 267 265
270 245 131
272 244 41
274 273 271
276 245 135
278 244 43
280 279 277
282 245 139
284 244 45
286 285 283
288 245 143
290 244 47
292 291 289
294 245 147
296 244 49
298 297 295
300 245 149
302 244 51
304 303 301
306 245 107
308 244 53
310 309 307
312 245 109
314 244 55
316 315 313
318 245 105
320 244 57
322 321 319
324 245 98
326 244 58
328 327 325
330 242 100
332 244 60
334 333 331
336 101 97
338 337 243
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 controllable_c<9>
i10 controllable_c<10>
i11 controllable_c<11>
i12 controllable_c<12>
i13 controllable_c<13>
i14 controllable_c<14>
i15 a<0>
i16 a<1>
i17 a<2>
i18 a<3>
i19 a<4>
i20 a<5>
i21 a<6>
i22 a<7>
i23 a<8>
i24 a<9>
i25 a<10>
i26 a<11>
i27 a<12>
i28 a<13>
i29 a<14>
l0 n63
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
l11 counter<10>_out
l12 counter<11>_out
l13 counter<12>_out
l14 counter<13>_out
l15 counter<14>_out
l16 counter<15>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:41 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv16s.v   ---gives--> mv16s.mv
> abc -c "read_blif_mv mv16s.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s mv16s_o.aig"   ---gives--> mv16s_o.aig
> aigtoaig mv16s_o.aig mv16s_o.aag   ---gives--> mv16s_o.aag (this file)
Content of mv16s.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [14:0] a;
  input [14:0] controllable_c;
  reg [15:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 16'b1111111111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8] ^
                    controllable_c[9] ^
                    controllable_c[10] ^
                    controllable_c[11] ^
                    controllable_c[12] ^
                    controllable_c[13] ^
                    controllable_c[14];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[15] & ctrl_xor)
       counter[15] = 0;
    else if(counter[14])
      begin
       counter[15] = 1;
       counter[14] = 0;
      end
    else
       counter[14:0] = a;
   end
endmodule
-------------------------------
