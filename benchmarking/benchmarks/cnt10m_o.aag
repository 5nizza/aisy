aag 72 2 11 1 59
2
4
6 1
8 71
10 79
12 87
14 95
16 103
18 111
20 119
22 127
24 135
26 144
64
28 26 6
30 24 6
32 22 6
34 20 6
36 18 6
38 16 6
40 14 6
42 12 6
44 8 6
46 10 6
48 46 44
50 48 42
52 50 40
54 52 38
56 54 36
58 56 34
60 58 32
62 60 30
64 62 28
66 44 2
68 45 3
70 69 67
72 44 3
74 73 46
76 72 47
78 77 75
80 48 3
82 81 42
84 80 43
86 85 83
88 50 3
90 89 40
92 88 41
94 93 91
96 52 3
98 97 38
100 96 39
102 101 99
104 54 3
106 105 36
108 104 37
110 109 107
112 56 3
114 113 34
116 112 35
118 117 115
120 58 3
122 121 32
124 120 33
126 125 123
128 60 3
130 129 30
132 128 31
134 133 131
136 29 5
138 62 3
140 138 137
142 139 29
144 143 141
i0 stay
i1 controllable_reset
l0 n7
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:41 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv cnt10m.v   ---gives--> cnt10m.mv
> abc -c "read_blif_mv cnt10m.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s cnt10m_o.aig"   ---gives--> cnt10m_o.aig
> aigtoaig cnt10m_o.aig cnt10m_o.aag   ---gives--> cnt10m_o.aag (this file)
Content of cnt10m.v:
// realizable
module bench(clk, stay, controllable_reset, err);
  input clk;
  input stay;
  input controllable_reset;
  output err;
  reg [9:0] counter;

  assign err = (counter == 10'b1111111111) ? 1 : 0;
  
  initial
  begin
    counter = 10'b0;
  end
  always @ (posedge clk)
  begin
    if(stay)
      counter = counter;
    else if(counter == 10'b0111111111 && controllable_reset)
      counter = 0;
    else
      counter = counter + 1;
   end
endmodule
-------------------------------
