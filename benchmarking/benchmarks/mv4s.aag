aag 69 6 5 1 58
2
4
6
8
10
12
14 1
16 121
18 127
20 133
22 139
52
24 17 14
26 16 14
28 25 14
30 19 14
32 18 14
34 31 14
36 21 14
38 20 14
40 37 14
42 23 14
44 22 14
46 43 14
48 34 28
50 48 40
52 50 46
54 4 3
56 5 2
58 57 55
60 58 6
62 59 7
64 63 61
66 65 44
68 67 40
70 69 67
72 70 69
74 67 41
76 75 72
78 40 26
80 41 8
82 81 79
84 66 26
86 83 67
88 87 85
90 40 32
92 41 10
94 93 91
96 66 32
98 95 67
100 99 97
102 41 12
104 66 38
106 102 67
108 107 105
110 44 41
112 111 41
114 113 67
116 89 77
118 76 26
120 119 117
122 101 77
124 76 32
126 125 123
128 109 77
130 76 38
132 131 129
134 114 77
136 76 44
138 137 135
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 a<0>
i4 a<1>
i5 a<2>
l0 n15
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:38 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv4s.v   ---gives--> mv4s.mv
> abc -c "read_blif_mv mv4s.mv; write_aiger -s mv4s.aig"   ---gives--> mv4s.aig
> aigtoaig mv4s.aig mv4s.aag   ---gives--> mv4s.aag (this file)
Content of mv4s.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [2:0] a;
  input [2:0] controllable_c;
  reg [3:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 4'b1111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^
                    controllable_c[1] ^
                    controllable_c[2];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[3] & ctrl_xor)
       counter[3] = 0;
    else if(counter[2])
      begin
       counter[3] = 1;
       counter[2] = 0;
      end
    else
       counter[2:0] = a;
   end
endmodule
-------------------------------
