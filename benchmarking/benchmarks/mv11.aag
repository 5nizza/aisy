aag 276 20 12 1 244
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42 1
44 221
46 249
48 285
50 321
52 357
54 393
56 429
58 465
60 501
62 537
64 552
150
66 45 42
68 44 42
70 67 42
72 47 42
74 46 42
76 73 42
78 49 42
80 48 42
82 79 42
84 51 42
86 50 42
88 85 42
90 53 42
92 52 42
94 91 42
96 55 42
98 54 42
100 97 42
102 57 42
104 56 42
106 103 42
108 59 42
110 58 42
112 109 42
114 61 42
116 60 42
118 115 42
120 63 42
122 62 42
124 121 42
126 65 42
128 64 42
130 127 42
132 76 70
134 132 82
136 134 88
138 136 94
140 138 100
142 140 106
144 142 112
146 144 118
148 146 124
150 148 130
152 4 3
154 5 2
156 155 153
158 156 6
160 157 7
162 161 159
164 162 8
166 163 9
168 167 165
170 168 10
172 169 11
174 173 171
176 174 12
178 175 13
180 179 177
182 180 14
184 181 15
186 185 183
188 186 16
190 187 17
192 191 189
194 192 18
196 193 19
198 197 195
200 198 20
202 199 21
204 203 201
206 205 128
208 71 22
210 68 23
212 211 209
214 68 22
216 206 68
218 213 207
220 219 217
222 77 25
224 222 214
226 77 24
228 226 215
230 229 225
232 74 25
234 232 215
236 235 230
238 74 24
240 238 214
242 241 236
244 206 74
246 243 207
248 247 245
250 214 24
252 214 74
254 253 251
256 254 239
258 83 27
260 258 257
262 83 26
264 262 256
266 265 261
268 80 27
270 268 256
272 271 266
274 80 26
276 274 257
278 277 272
280 206 80
282 279 207
284 283 281
286 257 26
288 257 80
290 289 287
292 290 275
294 89 29
296 294 293
298 89 28
300 298 292
302 301 297
304 86 29
306 304 292
308 307 302
310 86 28
312 310 293
314 313 308
316 206 86
318 315 207
320 319 317
322 293 28
324 293 86
326 325 323
328 326 311
330 95 31
332 330 329
334 95 30
336 334 328
338 337 333
340 92 31
342 340 328
344 343 338
346 92 30
348 346 329
350 349 344
352 206 92
354 351 207
356 355 353
358 329 30
360 329 92
362 361 359
364 362 347
366 101 33
368 366 365
370 101 32
372 370 364
374 373 369
376 98 33
378 376 364
380 379 374
382 98 32
384 382 365
386 385 380
388 206 98
390 387 207
392 391 389
394 365 32
396 365 98
398 397 395
400 398 383
402 107 35
404 402 401
406 107 34
408 406 400
410 409 405
412 104 35
414 412 400
416 415 410
418 104 34
420 418 401
422 421 416
424 206 104
426 423 207
428 427 425
430 401 34
432 401 104
434 433 431
436 434 419
438 113 37
440 438 437
442 113 36
444 442 436
446 445 441
448 110 37
450 448 436
452 451 446
454 110 36
456 454 437
458 457 452
460 206 110
462 459 207
464 463 461
466 437 36
468 437 110
470 469 467
472 470 455
474 119 39
476 474 473
478 119 38
480 478 472
482 481 477
484 116 39
486 484 472
488 487 482
490 116 38
492 490 473
494 493 488
496 206 116
498 495 207
500 499 497
502 473 38
504 473 116
506 505 503
508 506 491
510 125 41
512 510 509
514 125 40
516 514 508
518 517 513
520 122 41
522 520 508
524 523 518
526 122 40
528 526 509
530 529 524
532 206 122
534 531 207
536 535 533
538 509 40
540 509 122
542 541 539
544 542 527
546 545 131
548 544 128
550 549 547
552 551 207
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 controllable_c<9>
i10 a<0>
i11 a<1>
i12 a<2>
i13 a<3>
i14 a<4>
i15 a<5>
i16 a<6>
i17 a<7>
i18 a<8>
i19 a<9>
l0 n43
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
l11 counter<10>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:38 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv11.v   ---gives--> mv11.mv
> abc -c "read_blif_mv mv11.mv; write_aiger -s mv11.aig"   ---gives--> mv11.aig
> aigtoaig mv11.aig mv11.aag   ---gives--> mv11.aag (this file)
Content of mv11.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [9:0] a;
  input [9:0] controllable_c;
  reg [10:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 11'b11111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^ 
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8] ^
                    controllable_c[9];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[10] & ctrl_xor)
       counter[10] = 0;
    else
       counter = counter + {1'b0, a};
   end
endmodule
-------------------------------
