aag 191 34 19 1 138
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70 1
72 282
74 288
76 294
78 300
80 306
82 312
84 318
86 324
88 330
90 336
92 342
94 348
96 354
98 360
100 366
102 373
104 379
106 382
176
108 106 70
110 102 70
112 104 70
114 112 110
116 100 70
118 96 70
120 98 70
122 120 118
124 122 116
126 124 114
128 72 70
130 74 70
132 130 128
134 76 70
136 134 132
138 78 70
140 138 136
142 80 70
144 142 140
146 82 70
148 146 144
150 84 70
152 150 148
154 86 70
156 154 152
158 88 70
160 158 156
162 90 70
164 162 160
166 92 70
168 94 70
170 168 166
172 170 164
174 172 126
176 174 108
178 4 3
180 5 2
182 181 179
184 182 6
186 183 7
188 187 185
190 188 8
192 189 9
194 193 191
196 194 10
198 195 11
200 199 197
202 200 12
204 201 13
206 205 203
208 206 14
210 207 15
212 211 209
214 212 16
216 213 17
218 217 215
220 218 18
222 219 19
224 223 221
226 224 20
228 225 21
230 229 227
232 230 22
234 231 23
236 235 233
238 236 24
240 237 25
242 241 239
244 242 26
246 243 27
248 247 245
250 248 28
252 249 29
254 253 251
256 254 30
258 255 31
260 259 257
262 260 32
264 261 33
266 265 263
268 266 34
270 267 35
272 271 269
274 273 108
276 275 113
278 277 129
280 276 37
282 281 279
284 277 131
286 276 39
288 287 285
290 277 135
292 276 41
294 293 291
296 277 139
298 276 43
300 299 297
302 277 143
304 276 45
306 305 303
308 277 147
310 276 47
312 311 309
314 277 151
316 276 49
318 317 315
320 277 155
322 276 51
324 323 321
326 277 159
328 276 53
330 329 327
332 277 163
334 276 55
336 335 333
338 277 167
340 276 57
342 341 339
344 277 169
346 276 59
348 347 345
350 277 119
352 276 61
354 353 351
356 277 121
358 276 63
360 359 357
362 277 117
364 276 65
366 365 363
368 277 110
370 276 66
372 371 369
374 274 112
376 276 68
378 377 375
380 113 109
382 381 275
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 controllable_c<9>
i10 controllable_c<10>
i11 controllable_c<11>
i12 controllable_c<12>
i13 controllable_c<13>
i14 controllable_c<14>
i15 controllable_c<15>
i16 controllable_c<16>
i17 a<0>
i18 a<1>
i19 a<2>
i20 a<3>
i21 a<4>
i22 a<5>
i23 a<6>
i24 a<7>
i25 a<8>
i26 a<9>
i27 a<10>
i28 a<11>
i29 a<12>
i30 a<13>
i31 a<14>
i32 a<15>
i33 a<16>
l0 n71
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
l11 counter<10>_out
l12 counter<11>_out
l13 counter<12>_out
l14 counter<13>_out
l15 counter<14>_out
l16 counter<15>_out
l17 counter<16>_out
l18 counter<17>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:36 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv18s.v   ---gives--> mv18s.mv
> abc -c "read_blif_mv mv18s.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s mv18s_o.aig"   ---gives--> mv18s_o.aig
> aigtoaig mv18s_o.aig mv18s_o.aag   ---gives--> mv18s_o.aag (this file)
Content of mv18s.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [16:0] a;
  input [16:0] controllable_c;
  reg [17:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 18'b111111111111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8] ^
                    controllable_c[9] ^
                    controllable_c[10] ^
                    controllable_c[11] ^
                    controllable_c[12] ^
                    controllable_c[13] ^
                    controllable_c[14] ^
                    controllable_c[15] ^
                    controllable_c[16];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[17] & ctrl_xor)
       counter[17] = 0;
    else if(counter[16])
      begin
       counter[17] = 1;
       counter[16] = 0;
      end
    else
       counter[16:0] = a;
   end
endmodule
-------------------------------
