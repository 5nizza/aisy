aag 120 14 9 1 97
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30 1
32 123
34 138
36 156
38 174
40 192
42 210
44 228
46 240
76
48 32 30
50 34 30
52 50 48
54 36 30
56 54 52
58 38 30
60 58 56
62 40 30
64 62 60
66 42 30
68 66 64
70 44 30
72 70 68
74 46 30
76 74 72
78 4 3
80 5 2
82 81 79
84 82 6
86 83 7
88 87 85
90 88 8
92 89 9
94 93 91
96 94 10
98 95 11
100 99 97
102 100 12
104 101 13
106 105 103
108 106 14
110 107 15
112 111 109
114 113 74
116 115 16
118 117 48
120 116 49
122 121 119
124 48 16
126 124 18
128 125 19
130 129 127
132 130 115
134 133 51
136 132 50
138 137 135
140 127 51
142 141 129
144 142 20
146 143 21
148 147 145
150 148 115
152 151 55
154 150 54
156 155 153
158 145 55
160 159 147
162 160 22
164 161 23
166 165 163
168 166 115
170 169 59
172 168 58
174 173 171
176 163 59
178 177 165
180 178 24
182 179 25
184 183 181
186 184 115
188 187 63
190 186 62
192 191 189
194 181 63
196 195 183
198 196 26
200 197 27
202 201 199
204 202 115
206 205 67
208 204 66
210 209 207
212 199 67
214 213 201
216 214 28
218 215 29
220 219 217
222 220 115
224 223 71
226 222 70
228 227 225
230 217 71
232 231 219
234 232 75
236 233 74
238 237 235
240 239 115
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 a<0>
i8 a<1>
i9 a<2>
i10 a<3>
i11 a<4>
i12 a<5>
i13 a<6>
l0 n31
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:43 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv8.v   ---gives--> mv8.mv
> abc -c "read_blif_mv mv8.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s mv8_o.aig"   ---gives--> mv8_o.aig
> aigtoaig mv8_o.aig mv8_o.aag   ---gives--> mv8_o.aag (this file)
Content of mv8.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [6:0] a;
  input [6:0] controllable_c;
  reg [7:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 8'b11111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^ 
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[7] & ctrl_xor)
       counter[7] = 0;
    else
       counter = counter + {1'b0, a};
   end
endmodule
-------------------------------
