aag 192 14 9 1 169
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30 1
32 161
34 189
36 225
38 261
40 297
42 333
44 369
46 384
108
48 33 30
50 32 30
52 49 30
54 35 30
56 34 30
58 55 30
60 37 30
62 36 30
64 61 30
66 39 30
68 38 30
70 67 30
72 41 30
74 40 30
76 73 30
78 43 30
80 42 30
82 79 30
84 45 30
86 44 30
88 85 30
90 47 30
92 46 30
94 91 30
96 58 52
98 96 64
100 98 70
102 100 76
104 102 82
106 104 88
108 106 94
110 4 3
112 5 2
114 113 111
116 114 6
118 115 7
120 119 117
122 120 8
124 121 9
126 125 123
128 126 10
130 127 11
132 131 129
134 132 12
136 133 13
138 137 135
140 138 14
142 139 15
144 143 141
146 145 92
148 53 16
150 50 17
152 151 149
154 50 16
156 146 50
158 153 147
160 159 157
162 59 19
164 162 154
166 59 18
168 166 155
170 169 165
172 56 19
174 172 155
176 175 170
178 56 18
180 178 154
182 181 176
184 146 56
186 183 147
188 187 185
190 154 18
192 154 56
194 193 191
196 194 179
198 65 21
200 198 197
202 65 20
204 202 196
206 205 201
208 62 21
210 208 196
212 211 206
214 62 20
216 214 197
218 217 212
220 146 62
222 219 147
224 223 221
226 197 20
228 197 62
230 229 227
232 230 215
234 71 23
236 234 233
238 71 22
240 238 232
242 241 237
244 68 23
246 244 232
248 247 242
250 68 22
252 250 233
254 253 248
256 146 68
258 255 147
260 259 257
262 233 22
264 233 68
266 265 263
268 266 251
270 77 25
272 270 269
274 77 24
276 274 268
278 277 273
280 74 25
282 280 268
284 283 278
286 74 24
288 286 269
290 289 284
292 146 74
294 291 147
296 295 293
298 269 24
300 269 74
302 301 299
304 302 287
306 83 27
308 306 305
310 83 26
312 310 304
314 313 309
316 80 27
318 316 304
320 319 314
322 80 26
324 322 305
326 325 320
328 146 80
330 327 147
332 331 329
334 305 26
336 305 80
338 337 335
340 338 323
342 89 29
344 342 341
346 89 28
348 346 340
350 349 345
352 86 29
354 352 340
356 355 350
358 86 28
360 358 341
362 361 356
364 146 86
366 363 147
368 367 365
370 341 28
372 341 86
374 373 371
376 374 359
378 377 95
380 376 92
382 381 379
384 383 147
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 a<0>
i8 a<1>
i9 a<2>
i10 a<3>
i11 a<4>
i12 a<5>
i13 a<6>
l0 n31
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:43 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv8.v   ---gives--> mv8.mv
> abc -c "read_blif_mv mv8.mv; write_aiger -s mv8.aig"   ---gives--> mv8.aig
> aigtoaig mv8.aig mv8.aag   ---gives--> mv8.aag (this file)
Content of mv8.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [6:0] a;
  input [6:0] controllable_c;
  reg [7:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 8'b11111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^ 
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[7] & ctrl_xor)
       counter[7] = 0;
    else
       counter = counter + {1'b0, a};
   end
endmodule
-------------------------------
