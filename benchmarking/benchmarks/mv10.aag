aag 248 18 11 1 219
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38 1
40 201
42 229
44 265
46 301
48 337
50 373
52 409
54 445
56 481
58 496
136
60 41 38
62 40 38
64 61 38
66 43 38
68 42 38
70 67 38
72 45 38
74 44 38
76 73 38
78 47 38
80 46 38
82 79 38
84 49 38
86 48 38
88 85 38
90 51 38
92 50 38
94 91 38
96 53 38
98 52 38
100 97 38
102 55 38
104 54 38
106 103 38
108 57 38
110 56 38
112 109 38
114 59 38
116 58 38
118 115 38
120 70 64
122 120 76
124 122 82
126 124 88
128 126 94
130 128 100
132 130 106
134 132 112
136 134 118
138 4 3
140 5 2
142 141 139
144 142 6
146 143 7
148 147 145
150 148 8
152 149 9
154 153 151
156 154 10
158 155 11
160 159 157
162 160 12
164 161 13
166 165 163
168 166 14
170 167 15
172 171 169
174 172 16
176 173 17
178 177 175
180 178 18
182 179 19
184 183 181
186 185 116
188 65 20
190 62 21
192 191 189
194 62 20
196 186 62
198 193 187
200 199 197
202 71 23
204 202 194
206 71 22
208 206 195
210 209 205
212 68 23
214 212 195
216 215 210
218 68 22
220 218 194
222 221 216
224 186 68
226 223 187
228 227 225
230 194 22
232 194 68
234 233 231
236 234 219
238 77 25
240 238 237
242 77 24
244 242 236
246 245 241
248 74 25
250 248 236
252 251 246
254 74 24
256 254 237
258 257 252
260 186 74
262 259 187
264 263 261
266 237 24
268 237 74
270 269 267
272 270 255
274 83 27
276 274 273
278 83 26
280 278 272
282 281 277
284 80 27
286 284 272
288 287 282
290 80 26
292 290 273
294 293 288
296 186 80
298 295 187
300 299 297
302 273 26
304 273 80
306 305 303
308 306 291
310 89 29
312 310 309
314 89 28
316 314 308
318 317 313
320 86 29
322 320 308
324 323 318
326 86 28
328 326 309
330 329 324
332 186 86
334 331 187
336 335 333
338 309 28
340 309 86
342 341 339
344 342 327
346 95 31
348 346 345
350 95 30
352 350 344
354 353 349
356 92 31
358 356 344
360 359 354
362 92 30
364 362 345
366 365 360
368 186 92
370 367 187
372 371 369
374 345 30
376 345 92
378 377 375
380 378 363
382 101 33
384 382 381
386 101 32
388 386 380
390 389 385
392 98 33
394 392 380
396 395 390
398 98 32
400 398 381
402 401 396
404 186 98
406 403 187
408 407 405
410 381 32
412 381 98
414 413 411
416 414 399
418 107 35
420 418 417
422 107 34
424 422 416
426 425 421
428 104 35
430 428 416
432 431 426
434 104 34
436 434 417
438 437 432
440 186 104
442 439 187
444 443 441
446 417 34
448 417 104
450 449 447
452 450 435
454 113 37
456 454 453
458 113 36
460 458 452
462 461 457
464 110 37
466 464 452
468 467 462
470 110 36
472 470 453
474 473 468
476 186 110
478 475 187
480 479 477
482 453 36
484 453 110
486 485 483
488 486 471
490 489 119
492 488 116
494 493 491
496 495 187
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 a<0>
i10 a<1>
i11 a<2>
i12 a<3>
i13 a<4>
i14 a<5>
i15 a<6>
i16 a<7>
i17 a<8>
l0 n39
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:39 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv10.v   ---gives--> mv10.mv
> abc -c "read_blif_mv mv10.mv; write_aiger -s mv10.aig"   ---gives--> mv10.aig
> aigtoaig mv10.aig mv10.aag   ---gives--> mv10.aag (this file)
Content of mv10.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [8:0] a;
  input [8:0] controllable_c;
  reg [9:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 10'b1111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^ 
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[9] & ctrl_xor)
       counter[9] = 0;
    else
       counter = counter + {1'b0, a};
   end
endmodule
-------------------------------
