aag 256 30 17 1 209
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62 1
64 251
66 266
68 284
70 302
72 320
74 338
76 356
78 374
80 392
82 410
84 428
86 446
88 464
90 482
92 500
94 512
156
96 64 62
98 66 62
100 98 96
102 68 62
104 102 100
106 70 62
108 106 104
110 72 62
112 110 108
114 74 62
116 114 112
118 76 62
120 118 116
122 78 62
124 122 120
126 80 62
128 126 124
130 82 62
132 130 128
134 84 62
136 134 132
138 86 62
140 138 136
142 88 62
144 142 140
146 90 62
148 146 144
150 92 62
152 150 148
154 94 62
156 154 152
158 4 3
160 5 2
162 161 159
164 162 6
166 163 7
168 167 165
170 168 8
172 169 9
174 173 171
176 174 10
178 175 11
180 179 177
182 180 12
184 181 13
186 185 183
188 186 14
190 187 15
192 191 189
194 192 16
196 193 17
198 197 195
200 198 18
202 199 19
204 203 201
206 204 20
208 205 21
210 209 207
212 210 22
214 211 23
216 215 213
218 216 24
220 217 25
222 221 219
224 222 26
226 223 27
228 227 225
230 228 28
232 229 29
234 233 231
236 234 30
238 235 31
240 239 237
242 241 154
244 243 32
246 245 96
248 244 97
250 249 247
252 96 32
254 252 34
256 253 35
258 257 255
260 258 243
262 261 99
264 260 98
266 265 263
268 255 99
270 269 257
272 270 36
274 271 37
276 275 273
278 276 243
280 279 103
282 278 102
284 283 281
286 273 103
288 287 275
290 288 38
292 289 39
294 293 291
296 294 243
298 297 107
300 296 106
302 301 299
304 291 107
306 305 293
308 306 40
310 307 41
312 311 309
314 312 243
316 315 111
318 314 110
320 319 317
322 309 111
324 323 311
326 324 42
328 325 43
330 329 327
332 330 243
334 333 115
336 332 114
338 337 335
340 327 115
342 341 329
344 342 44
346 343 45
348 347 345
350 348 243
352 351 119
354 350 118
356 355 353
358 345 119
360 359 347
362 360 46
364 361 47
366 365 363
368 366 243
370 369 123
372 368 122
374 373 371
376 363 123
378 377 365
380 378 48
382 379 49
384 383 381
386 384 243
388 387 127
390 386 126
392 391 389
394 381 127
396 395 383
398 396 50
400 397 51
402 401 399
404 402 243
406 405 131
408 404 130
410 409 407
412 399 131
414 413 401
416 414 52
418 415 53
420 419 417
422 420 243
424 423 135
426 422 134
428 427 425
430 417 135
432 431 419
434 432 54
436 433 55
438 437 435
440 438 243
442 441 139
444 440 138
446 445 443
448 435 139
450 449 437
452 450 56
454 451 57
456 455 453
458 456 243
460 459 143
462 458 142
464 463 461
466 453 143
468 467 455
470 468 58
472 469 59
474 473 471
476 474 243
478 477 147
480 476 146
482 481 479
484 471 147
486 485 473
488 486 60
490 487 61
492 491 489
494 492 243
496 495 151
498 494 150
500 499 497
502 489 151
504 503 491
506 504 155
508 505 154
510 509 507
512 511 243
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 controllable_c<8>
i9 controllable_c<9>
i10 controllable_c<10>
i11 controllable_c<11>
i12 controllable_c<12>
i13 controllable_c<13>
i14 controllable_c<14>
i15 a<0>
i16 a<1>
i17 a<2>
i18 a<3>
i19 a<4>
i20 a<5>
i21 a<6>
i22 a<7>
i23 a<8>
i24 a<9>
i25 a<10>
i26 a<11>
i27 a<12>
i28 a<13>
i29 a<14>
l0 n63
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
l5 counter<4>_out
l6 counter<5>_out
l7 counter<6>_out
l8 counter<7>_out
l9 counter<8>_out
l10 counter<9>_out
l11 counter<10>_out
l12 counter<11>_out
l13 counter<12>_out
l14 counter<13>_out
l15 counter<14>_out
l16 counter<15>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:42 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv16.v   ---gives--> mv16.mv
> abc -c "read_blif_mv mv16.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s mv16_o.aig"   ---gives--> mv16_o.aig
> aigtoaig mv16_o.aig mv16_o.aag   ---gives--> mv16_o.aag (this file)
Content of mv16.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [14:0] a;
  input [14:0] controllable_c;
  reg [15:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 16'b1111111111111111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^ 
                    controllable_c[1] ^
                    controllable_c[2] ^
                    controllable_c[3] ^
                    controllable_c[4] ^
                    controllable_c[5] ^
                    controllable_c[6] ^
                    controllable_c[7] ^
                    controllable_c[8] ^
                    controllable_c[9] ^
                    controllable_c[10] ^
                    controllable_c[11] ^
                    controllable_c[12] ^
                    controllable_c[13] ^
                    controllable_c[14];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[15] & ctrl_xor)
       counter[15] = 0;
    else
       counter = counter + {1'b0, a};
   end
endmodule
-------------------------------
