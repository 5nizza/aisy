aag 80 6 5 1 69
2
4
6
8
10
12
14 1
16 81
18 109
20 145
22 160
52
24 17 14
26 16 14
28 25 14
30 19 14
32 18 14
34 31 14
36 21 14
38 20 14
40 37 14
42 23 14
44 22 14
46 43 14
48 34 28
50 48 40
52 50 46
54 4 3
56 5 2
58 57 55
60 58 6
62 59 7
64 63 61
66 65 44
68 29 8
70 26 9
72 71 69
74 26 8
76 66 26
78 73 67
80 79 77
82 35 11
84 82 74
86 35 10
88 86 75
90 89 85
92 32 11
94 92 75
96 95 90
98 32 10
100 98 74
102 101 96
104 66 32
106 103 67
108 107 105
110 74 10
112 74 32
114 113 111
116 114 99
118 41 13
120 118 117
122 41 12
124 122 116
126 125 121
128 38 13
130 128 116
132 131 126
134 38 12
136 134 117
138 137 132
140 66 38
142 139 67
144 143 141
146 117 12
148 117 38
150 149 147
152 150 135
154 153 47
156 152 44
158 157 155
160 159 67
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 a<0>
i4 a<1>
i5 a<2>
l0 n15
l1 counter<0>_out
l2 counter<1>_out
l3 counter<2>_out
l4 counter<3>_out
o0 err
c
bench
This file was written by ABC on Thu May 23 15:48:35 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv mv4.v   ---gives--> mv4.mv
> abc -c "read_blif_mv mv4.mv; write_aiger -s mv4.aig"   ---gives--> mv4.aig
> aigtoaig mv4.aig mv4.aag   ---gives--> mv4.aag (this file)
Content of mv4.v:
// realizable
module bench(clk, a, controllable_c, err);
  input clk;
  input [2:0] a;
  input [2:0] controllable_c;
  reg [3:0] counter;
  output err;
  wire ctrl_xor;
  
  assign err = (counter == 4'b1111) ? 1 : 0;
  assign ctrl_xor = controllable_c[0] ^ 
                    controllable_c[1] ^
                    controllable_c[2];

  initial
  begin
    counter = 0;
  end

  always @ (posedge clk)
  begin
    if(counter[3] & ctrl_xor)
       counter[3] = 0;
    else
       counter = counter + {1'b0, a};
   end
endmodule
-------------------------------
